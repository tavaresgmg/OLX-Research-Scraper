import argparse
from multiprocessing import Pool
from scraper import get_prices_async
from analysis import analyze_prices, plot_histogram
from database import Database
import asyncio
import logging

# Configura√ß√£o do logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def process_product(product_name, max_pages):
    print(f"\n=== INICIANDO AN√ÅLISE PARA {product_name} ===")

    # Configurar o banco de dados
    db = Database()
    db.connect()
    db.create_table()

    # Coletar os pre√ßos
    prices = asyncio.run(get_prices_async(product_name, max_pages, db))

    db.close()

    if not prices:
        print(f"\n[FALHA] Nenhum pre√ßo v√°lido coletado para {product_name}")
        return None

    analysis = analyze_prices(prices)
    if analysis:
        print(f"\n=== RESULTADOS PARA {product_name} ===")
        print(f"üîç An√∫ncios analisados: {analysis['Total An√∫ncios']}")
        print(f"‚úÖ An√∫ncios v√°lidos: {analysis['An√∫ncios V√°lidos']}")
        print(f"üìä M√©dia de pre√ßo: R$ {analysis['M√©dia']:,.2f}")
        print(f"üìà Mediana de pre√ßo: R$ {analysis['Mediana']:,.2f}")
        print(f"‚¨áÔ∏è  Pre√ßo m√≠nimo: R$ {analysis['M√≠nimo']:,.2f}")
        print(f"‚¨ÜÔ∏è  Pre√ßo m√°ximo: R$ {analysis['M√°ximo']:,.2f}")
        print(f"üìâ Desvio padr√£o: R$ {analysis['Desvio Padr√£o']:,.2f}")
        plot_histogram(prices, product_name)
        return analysis
    else:
        print(f"\n[AVISO] Dados insuficientes para an√°lise estat√≠stica de {product_name}")
        return None

def main():
    parser = argparse.ArgumentParser(description='Analisador de pre√ßos OLX')
    parser.add_argument('produtos', type=str, help='Lista de produtos para pesquisa (separados por v√≠rgula)')
    parser.add_argument('-p', '--paginas', type=int, default=3, help='N√∫mero de p√°ginas para analisar por produto')
    args = parser.parse_args()

    product_list = [p.strip() for p in args.produtos.split(',')]

    # Execu√ß√£o em Multiprocessing
    with Pool(processes=len(product_list)) as pool:
        results = pool.starmap(process_product, [(product, args.paginas) for product in product_list])

    print("\n=== AN√ÅLISE CONCLU√çDA ===")

if __name__ == "__main__":
    main()